@using EntityLayer.Concrete
@model Blog
@{
    ViewData["Title"] = "BlogDetail";
    Layout = "~/Views/Shared/UserLayout.cshtml";
}

<!--
    Author: W3layouts
    Author URL: http://w3layouts.com
    License: Creative Commons Attribution 3.0 Unported
    License URL: http://creativecommons.org/licenses/by/3.0/
-->

<!DOCTYPE html>
<html lang="zxx">


<body>

    <section class="banner-bottom">
        <!--/blog-->
        <div class="container">
            <div class="row">
                <!--left-->
                <div class="col-lg-8 left-blog-info-w3layouts-agileits text-left">
                    <div class="blog-grid-top">
                        <div class="b-grid-top">
                            <div class="blog_info_left_grid">
                                <a href="#">
                                    <img src="@Model.BlogImage" class="img-fluid" alt="">
                                </a>
                            </div>
                            <div class="blog-info-middle">
                                <ul>
                                    <li>
                                        <a href="#">
                                            <i class="far fa-calendar-alt"></i> @(((DateTime)(Model.BlogCreateDate)).ToString("dd-MMM-yyyy"))
                                        </a>
                                    </li>
                                    <li class="mx-2">
                                        <a href="#">
                                            <i class="far fa-user"><label style="margin-left:5px;">@Model.Writer.WriterName</label></i>
                                        </a>
                                    </li>
                                    <li class="mx-2">
                                        <a href="#">
                                            <i class="fas fa-envelope"><label style="margin-left:5px;">@Model.Writer.WriterMail</label></i>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#">
                                            <i class="far fa-comment">@await Component.InvokeAsync("GetCommentCountByBlog", new { id = Model.BlogID })</i>
                                        </a>
                                    </li>
                                    <li class="mx-2">
                                        <a href="#">
                                            <i class="fas fa-tags"><label style="margin-left:5px;">@Model.Category.CategoryName</label></i>
                                        </a>
                                    </li>

                                </ul>
                            </div>
                        </div>

                        <h3>
                            <a href="#">@(Model.BlogTitle) </a>
                        </h3>
                        <p class="mb-0 font-weight-light" style="font-family:Bahnschrift;font-size:15px;">
                            @(Model.BlogContent)
                        </p>
                        <a href="#" class="btn btn-primary read-m">Read More</a>
                    </div>

                    @await Component.InvokeAsync("CommentsByBlog", new { id = Model.BlogID })
                    @* 
				      CommentsByBlog ViewComponent metoduna parametre olarak bloğun id değerini yukarıdaki gibi gönderiyoruz.

					*@


                    <script src="~/inspinia-gh-pages/js/jquery-3.1.1.min.js"></script>

                    <div class="comment-top">
                        @*YORUM EKLEME İŞLEMİ AJAX İLE DAHA SONRA YAPILACAK*@
                        <h4>Yorum Yap</h4>
                        <div class="comment-bottom">
                            <input class="form-control" type="text" id="UserName" placeholder="Ad" required="">
                            <input class="form-control" type="text" id="Title" placeholder="Başlık" required="">
                            <textarea class="form-control" id="Content" placeholder="Mesaj" required=""></textarea>
                            <button class="btn btn-primary submit" id="CommentButton">Gönder</button>
                        </div>
                    </div>
                    @*    JSON (JavaScript Object Notation), hafif ve okunabilir bir veri formatıdır.
                          Modern web uygulamalarında, istemci (client) ile sunucu (server) arasında veri alışverişi için JSON yaygın olarak kullanılır.
                          JSON, JavaScript ile uyumlu olduğu için tarayıcı tabanlı uygulamalarda kolayca işlenebilir.
                    *@
                    <script>
                        $("#CommentButton").click(function(){  
                           let commentEntity = {
                               CommentUserName:$("#UserName").val(), // id değeri UserName olan inputtanki veriyi alır.
                               CommentTitle:$("#Title").val(), // id değeri Title olan inputtanki veriyi alır.
                               CommentContent:$("#Content").val(), // id değeri Content olan inputtanki veriyi alır.
                               BlogID : @Model.BlogID 
                           };

                           $.ajax({
                               url:"/Blog/InsertCommentByBlog", // istek atılacak adres
                               type:"post", // http türü
                               contentType:"application/json", // Sunucuya gönderilen verinin formatının json formatında oldugu belirtiyoruz, 
                               data:JSON.stringify(commentEntity), // data -> Ajax isteği ile sunucuya gönderilecek veriyi temsil eder.  commentEntity nesnesini json formatına çeviriyoruz
                               dataType:"json",  // sunucudan beklenen cevap türünün json olduğunu belirttik
                               success:function(response){ // işlem başarılı olursa sunucudan gelen cevabı console.log ile console yazdırıyoruz
                                   console.log(response);
                                  
                                   let newComment =  // img src="/BlogTemplate/images/t1.jpg" ifadesindeki tilta yani ~ işaretini kaldırdığımız zaman calısıyor.
                                   `
                                      <div class="media">

                            <img src="/BlogTemplate/blogResmi.png" alt="" class="img-fluid" style="object-fit: cover;border-radius: 50%; width:45px;height:45px;" />
                            <div class="media-body">

                                <h5 class="mt-0" style="font-family:Georgia; color:darkred">${commentEntity.commentCreateDate}</h5>
                                <p style="font-size:14px;">
                                  ${commentEntity.CommentContent}
                                    <br />
                                    <strong style="font-family:Bahnschrift; color:green"> Oluşturulma Tarihi: ${response.CommentCreateDate}</strong>
                                </p>
                            </div>
                        </div>
                                   `;


                                   $("#CommentDiv").append(newComment) // append -> eklemek, id değeri CommentDiv olan dive oluşturduğumuz html yapısını ekler
                               }
                           });
                        });
                    </script>
                </div>

                <!--//left-->
                <!--right-->
                <style>
                    .profile-img {
                        width: 320px;
                        height: 320px;
                        border-radius: 50%; /* Yuvarlak yapı */
                        object-fit: cover; /* Görselin düzgün oturmasını sağlar */
                        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Hafif gölge efekti */
                        transition: transform 0.3s ease-in-out;
                    }

                        .profile-img:hover {
                            transform: scale(1.1); /* Üzerine gelince hafif büyüme efekti */
                        }
                </style>
                <aside class="col-lg-4 agileits-w3ls-right-blog-con text-right">
                    <div class="right-blog-info text-left">
                        <div style="display: flex; justify-content: center;">
                            <h3><label class="badge badge-gradient-success" style="font-family:Georgia;">@Model.Writer.WriterName</label></h3>
                        </div>
                        <div class="tech-btm" style="display: flex; justify-content: center;">
                            <img src="~/WriterAddedImages/@Model.Writer.WriterImage"
                                 class="profile-img"
                                 alt="image">
                        </div>
                        <div style="display: flex; justify-content: center;">
                            <h5><label class="badge badge-gradient-success" style="font-family:Georgia">Yazar Hakkında</label></h5>
                        </div>

                        <div class="tech-btm">
                            <p style="font-family:Bahnschrift;color:darkred">@Model.Writer.WriterAbout</p>

                        </div>

                        @await Component.InvokeAsync("GetCategoryList")

                        @await Component.InvokeAsync("GetLastBlogsByWriter", new { id = Model.Writer.WriterID })

                        @await Component.InvokeAsync("GetLastBlogByCategory", new { id = Model.CategoryID })
                    </div>

                </aside>
                <!--//right-->
            </div>
        </div>
    </section>
</body>

</html>

