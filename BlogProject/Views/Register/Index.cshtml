@using EntityLayer.Concrete
@model Writer

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/UserLayout.cshtml";
}
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>


@*       
        @using (Html.BeginForm(string actionName, string controllerName, FormMethod method)) {  }

        1.parametre formun gönderileceği Action(eylem) metodunun ismi
        2.parametre formun gönderileceği Controller'in ismi
        3.parametre formun hangi HTTP metodu ile gönderileceğini belirler
    *@

<section class="main-content-w3layouts-agileits">
    <div class="container">
        <h3 class="tittle">MBLOG Kayıt Ol</h3>
        <div class="inner-sec">
            <div class="login p-5 bg-light mx-auto mw-100">
                @using (Html.BeginForm("Index","Register",FormMethod.Post))
                {
                    <div class="form-row">
                        <div class="col-md-6 mb-3">
                            <label for="validationCustom01">Kullanıcı Adı</label>
                            @Html.TextBoxFor(x => x.WriterName,new {@class ="form-control"}) @*Buradaki texbox'taki metin WriterName alanı için gönder. *@
                             @Html.ValidationMessageFor(x=>x.WriterName,"",new {@class="text-danger"})  @* Ortadaki parametre Hata mesajı yerine gecicek string ifade ama biz bunu zaten WriterValidator'da yaptık.*@
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="validationCustom02">Mail</label>
                            @Html.TextBoxFor(x => x.WriterMail, new {@class="form-control"})
                            @Html.ValidationMessageFor(x=>x.WriterMail,"",new {@class="text-danger"})
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="exampleInputPassword1 mb-2">Parola</label>
                            @Html.TextBoxFor(x => x.WriterPassword,new {@class="form-control"})
                            @Html.ValidationMessageFor(x => x.WriterPassword, "", new { @class = "text-danger"})
                        </div>
                        <div class="form-group col-md-6">
                            <label for="exampleInputPassword1 mb-2">Hakkımda</label>
                            @Html.TextBoxFor(x => x.WriterAbout, new {@class="form-control"})
                            @Html.ValidationMessageFor(x => x.WriterAbout, "", new { @class = "text-danger"})
                        </div>

                    </div>

                    <button type="submit" class="btn btn-primary submit mb-4">Kayıt Ol</button>
                    <p>
                        <a href="#" id="ContractText">Sözleşmeyi okudum, onayladım.</a>
                    </p>
                }
            </div>
        </div>
    </div>
    <script>
        $('#ContractText').click(function(){
            swal("MBLOG Bilgilendirme","Üye olan kullanıcılarımız topluluk kurallarına uymak zorundadır. Topluluk kurallarını ihlal eden tüm kullanıcıların hesapları süresiz erişime kapatılır. Rahatsız edici içerik ve spam yapan kullanıcıların hesaplarının erişimi süresiz erişime engellenmekle beraber yasal işlemler başlatılacaktır. MBLOG'a üye olan her yazar bu metni okumuş ve kabul etmiş sayılır. MBLOG tüm hakları saklıdır.","info");
        })
        @*
		  $('#ContractText') => id değeri ContractText olan öğeyi(elementi) seçer.
		  .click(function(){}) => tıklanma oldugu zaman içeride bir fonksiyon(metot) tanımlar ve her tıklamada bu metodu calıstırır.
		*@
    </script>
</section>

        <